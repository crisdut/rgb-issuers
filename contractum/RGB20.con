import RGBContract: *

interface FungibleAsset
    pub ticker: Ticker
    pub name: AssetName
    pub precision: Precision
    pub terms?: ContractText

    owned [balance*]: Amount

    op transfer: from [balance+] -> to [balance*]
        sum.from =?= to.sum !! inflation

    error inflation := "the sum of inputs does not equal to the sum of outputs"

interface InflatableFA: FungibleAsset


-- Interface gets compiled into an API for each specific contract
interface RGB20: FungibleAsset

    -- # Inflation control
    pub [issued+]: Amount
    pub [burned*]: Amount
    pub maxInflation: Amount
    pub [inflationChange*]: I128

    read knownIssued: known [issued+] -> Amount := known.sum
    read knownBurned: known [burned*] -> Amount := known.sum ?? 0

    read totalIssued?: issues [issued+], ops [inflate*] -> Amount?
        ops.flatMap(.\ $0.(owned "issueRight").all(.\ $0.spentBy.operation \in ops) ?? ~
        ---- Alt form (AGDA- and Lean-style):
        -- let spendingOps = { spender <| \forall operation \in ops, \forall spender \in operation.spentBy }
        -- let unknown = { operation <| \forall operation \in spendingOps : operation ~\in ops }
        -- unknown.is_empty ?? ~
        issues.sum

    read totalBurned?: burned [burned+], ops [burn*] -> Amount?
        ops.all (.\ $0.(owned "issueRight").all (.\ $0.spentBy.operation \in ops)) ?? ~
        burned.sum

    read knownCirculating: issued knownIssued, burned knownBurned -> Amount
        issued - burned
    read totalCirculating?: issued totalIssued?, burned totalBurned? -> Amount?
        issued? - burned? ?? ~

    owned renominateRight?
    owned [issueRight*]: Amount

    genesis issue: ticker, name, precision, terms?, supply issued
                 -> beneficiary [balance*], issueRight*, renominateRight?
        supply =?= beneficiary.sum !! sumMismatch

    op inflate?: using [issueRight+] -> next [issueRight*], beneficiary [balance*], new issued

    op burn?: using [issueRight+] -> next [issueRight*], beneficiary [balance*], new burned

    op renominate?: using renominateRight
        -> new renominateRight?, ticker, name, terms?, precision
